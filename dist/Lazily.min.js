const Lazily=function(t){"use strict";const e="lazily",n=["src","srcset"],i="querySelectorAll"in document&&"IntersectionObserver"in window&&"MutationObserver"in window,r=i?new MutationObserver(function(t){t.forEach(function(t){[].slice.call(t.addedNodes).forEach(function(t){(t instanceof HTMLIframeElement||t instanceof HTMLImageElement)&&function(t){if(e in t.dataset)return;if(t.dataset[e]="","loading"in t)return void(t.hasAttribute("loading")||t.setAttribute("loading","lazy"));n.forEach(function(e){t.hasAttribute(e)&&(t.dataset[e]=t[e]||"",t.removeAttribute(e))}),o.observe(t)}(t)})})}):t,o=i?new IntersectionObserver(function(t){t.forEach(function(t){t.isIntersecting&&a(t.target)})},{rootMargin:"50%"}):t;function a(t){o.unobserve(t),n.forEach(function(e){e in t.dataset&&(t[e]=t.dataset[e],delete t.dataset[e])})}function c(){[].slice.call(o.takeRecords()).forEach(function(t){a(t.target)})}return i&&(r.observe(document.documentElement,{childList:!0,subtree:!0}),window.addEventListener("beforeprint",c)),{forceLoad:function(){return i&&c(),this},isSupported:function(){return i}}}();
