const Lazily=function(t){"use strict";const e="lazily",n={iframe:function(t,e){e(t,["src"])},img:function(t,e){e(t,["src","srcset"])},picture:function(t,e){[].slice.call(t.querySelectorAll("source")).forEach(function(t){e(t,["src","srcset"])})},video:function(t,e){[].slice.call(t.querySelectorAll("source")).forEach(function(t){e(t,["src"])}),e(t,["poster","src"])}},o="IntersectionObserver"in window&&"MutationObserver"in window,i=o?new MutationObserver(function(t){t.forEach(function(t){[].slice.call(t.addedNodes).forEach(function(t){t instanceof Element&&t.tagName.toLowerCase()in n&&function(t){if(e in t.dataset)return;if(t.dataset[e]="","loading"in t)return void(t.hasAttribute("loading")||t.setAttribute("loading","lazy"));const o=t.tagName.toLowerCase();n[o](t,u),c.observe(t)}(t)})})}):t,c=o?new IntersectionObserver(function(t){t.forEach(function(t){t.isIntersecting&&r(t.target)})},{rootMargin:"50%"}):t;function r(t){c.unobserve(t);const e=t.tagName.toLowerCase();n[e](t,s)}function a(){[].slice.call(c.takeRecords()).forEach(function(t){r(t.target)})}function s(t,e){e.forEach(function(e){e in t.dataset&&(t[e]=t.dataset[e],delete t.dataset[e])})}function u(t,e){e.forEach(function(e){t.hasAttribute(e)&&(t.dataset[e]=t[e],t.removeAttribute(e))})}return o&&(i.observe(document.documentElement,{childList:!0,subtree:!0}),window.matchMedia("print").addListener(function(t){t.matches&&a()})),{forceLoad:function(){return o&&a(),this},isSupported:function(){return o}}}();
